{"version":3,"sources":["Components/Header.js","Components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","allMemes","randomImg","handleChange","bind","handleClick","fetch","then","response","json","data","memes","setState","randomNum","Math","floor","random","length","newRandomImg","url","event","target","name","value","this","preventDefault","className","type","placeholder","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kNAceA,MAZf,WACI,OACI,gCACI,yBACIC,IAAI,iEACJC,IAAI,0BAER,gD,0CC6EGC,E,kDAnFX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,SAAU,GACVC,UAAW,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBATV,E,gEAYO,IAAD,OAEfE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,IACJC,EAASD,EAAKA,KAAdC,MACP,EAAKC,SAAS,CACVX,SAAUU,IAGd,IAAME,EAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAMG,SAASgB,QAC3DC,EAAe,EAAKpB,MAAMG,SAASY,GAAWM,IACpD,EAAKP,SAAS,CACVV,UAAWgB,S,mCAOdE,GAAO,IAAD,EACOA,EAAMC,OAArBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACbC,KAAKZ,SAAL,eACKU,EAAQC,M,kCAILH,GACRA,EAAMK,iBAEN,IAAMZ,EAAYC,KAAKC,MAAMD,KAAKE,SAAWQ,KAAK1B,MAAMG,SAASgB,QAC3DC,EAAeM,KAAK1B,MAAMG,SAASY,GAAWM,IACpDK,KAAKZ,SAAS,CACVV,UAAWgB,M,+BAKf,OACI,6BACI,0BAAMQ,UAAU,aAEZ,2BAAQC,KAAK,OACLL,KAAK,UACLC,MAAOC,KAAK1B,MAAMC,QAClB6B,YAAY,WACZC,SAAUL,KAAKrB,eAIvB,2BAAQwB,KAAK,OACLL,KAAK,aACLC,MAAOC,KAAK1B,MAAME,WAClB4B,YAAY,cACZC,SAAUL,KAAKrB,eAIvB,4BAAQ2B,QAASN,KAAKnB,aAAtB,QAGJ,yBAAKqB,UAAU,QACX,yBAAK/B,IAAK6B,KAAK1B,MAAMI,UAAWN,IAAI,SACpC,wBAAI8B,UAAU,OAAOF,KAAK1B,MAAMC,SAChC,wBAAI2B,UAAU,UAAUF,KAAK1B,MAAME,kB,GA7E3B+B,a,MCYbC,MATf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.30cb7b79.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header(){\n    return(\n        <header>\n            <img \n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" \n                alt=\"Meme Generator Header\"\n            />\n            <h1>Meme Generator</h1>\n        </header>\n    )\n}\n\nexport default Header","import React, { Component} from 'react'\n\nclass MemeGenerator extends Component {\n    constructor(){\n        super()\n        this.state = {\n            topText: '',\n            bottomText: '',\n            allMemes: [],\n            randomImg: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    componentDidMount(){\n\n        fetch('https://api.imgflip.com/get_memes')\n            .then(response => response.json())\n            .then(data => {\n                const {memes} = data.data\n                this.setState({\n                    allMemes: memes\n                })\n                //random image on load page\n                const randomNum = Math.floor(Math.random() * this.state.allMemes.length)\n                const newRandomImg = this.state.allMemes[randomNum].url\n                this.setState({\n                    randomImg: newRandomImg\n                })\n            })\n        \n        \n    }\n\n    handleChange(event){\n        const {name, value} = event.target\n        this.setState({\n            [name] : value\n        })\n    }\n\n    handleClick(event){\n        event.preventDefault()\n\n        const randomNum = Math.floor(Math.random() * this.state.allMemes.length)\n        const newRandomImg = this.state.allMemes[randomNum].url\n        this.setState({\n            randomImg: newRandomImg\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <form className=\"meme-form\">\n                    \n                    <input  type=\"text\" \n                            name=\"topText\" \n                            value={this.state.topText} \n                            placeholder=\"top text\"\n                            onChange={this.handleChange}\n                    >\n                    </input>\n\n                    <input  type=\"text\" \n                            name=\"bottomText\" \n                            value={this.state.bottomText} \n                            placeholder=\"bottom text\"\n                            onChange={this.handleChange}\n                    >\n                    </input>\n                    \n                    <button onClick={this.handleClick}>Gen</button>\n                </form>\n\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"meme\" />\n                    <h3 className=\"top\">{this.state.topText}</h3>\n                    <h3 className=\"bottom\">{this.state.bottomText}</h3>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React from 'react';\nimport Header from './Components/Header'\nimport MemeGenerator from './Components/MemeGenerator'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}